name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.21-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./...

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.21-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.21-

    - name: Download dependencies
      run: go mod download

    - name: Build examples
      run: |
        mkdir -p dist
        cd examples/reqrep
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o ../../dist/reqrep-example-linux-amd64 .
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o ../../dist/reqrep-example-darwin-amd64 .
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o ../../dist/reqrep-example-windows-amd64.exe .
        cd ../pubsub
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o ../../dist/pubsub-example-linux-amd64 .
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o ../../dist/pubsub-example-darwin-amd64 .
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o ../../dist/pubsub-example-windows-amd64.exe .

    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version if it exists
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          awk '/^## \[/{if(p) exit; if(/'"${GITHUB_REF#refs/tags/}"'/) p=1; next} p&&/^## \[/{exit} p' CHANGELOG.md >> $GITHUB_OUTPUT || echo "See commits for changes in this release." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=See commits for changes in this release." >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in ${{ github.ref_name }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Examples
          
          This release includes pre-built examples for multiple platforms:
          - REQ/REP example: Demonstrates request-reply pattern
          - PUB/SUB example: Demonstrates publish-subscribe pattern
          
          ## Installation
          
          ```bash
          go get github.com/thinkdoggie/zmq4chan@${{ github.ref_name }}
          ```
          
          ## Prerequisites
          
          Make sure you have ZeroMQ installed on your system:
          - **macOS**: `brew install zeromq`
          - **Ubuntu/Debian**: `sudo apt-get install libzmq3-dev`
          - **RHEL/CentOS**: `sudo yum install zeromq-devel`
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

    - name: Upload REQ/REP example (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/reqrep-example-linux-amd64
        asset_name: reqrep-example-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload REQ/REP example (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/reqrep-example-darwin-amd64
        asset_name: reqrep-example-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload REQ/REP example (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/reqrep-example-windows-amd64.exe
        asset_name: reqrep-example-windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Upload PUB/SUB example (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pubsub-example-linux-amd64
        asset_name: pubsub-example-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload PUB/SUB example (macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pubsub-example-darwin-amd64
        asset_name: pubsub-example-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload PUB/SUB example (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/pubsub-example-windows-amd64.exe
        asset_name: pubsub-example-windows-amd64.exe
        asset_content_type: application/octet-stream 