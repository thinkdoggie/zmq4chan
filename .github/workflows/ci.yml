name: CI

on:
  push:
    branches: [ main, develop, 'dev/*' ]
  pull_request:
    branches: [ main, develop, 'dev/*' ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.19', '1.20', '1.21']
        version: ['v1', 'v2']
        
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install ZeroMQ (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev

    - name: Install ZeroMQ (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install zeromq

    - name: Install ZeroMQ (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install vcpkg and ZeroMQ
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe install zeromq:x64-windows
        echo "CGO_CFLAGS=-I$(pwd)/installed/x64-windows/include" >> $GITHUB_ENV
        echo "CGO_LDFLAGS=-L$(pwd)/installed/x64-windows/lib -lzmq" >> $GITHUB_ENV

    - name: Set working directory
      run: |
        if [ "${{ matrix.version }}" = "v1" ]; then
          echo "WORK_DIR=." >> $GITHUB_ENV
        else
          echo "WORK_DIR=v2" >> $GITHUB_ENV
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ matrix.version }}-${{ hashFiles(format('{0}/**/go.sum', env.WORK_DIR)) }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-${{ matrix.version }}-

    - name: Download dependencies
      run: |
        cd ${{ env.WORK_DIR }}
        go mod download

    - name: Verify dependencies
      run: |
        cd ${{ env.WORK_DIR }}
        go mod verify

    - name: Run tests
      run: |
        cd ${{ env.WORK_DIR }}
        go test -v -race -coverprofile coverage.out ./...

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.21'
      uses: codecov/codecov-action@v5
      with:
        file: ./${{ env.WORK_DIR }}/coverage.out
        flags: unittests-${{ matrix.version }}
        name: codecov-${{ matrix.version }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['v1', 'v2']
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev

    - name: Set working directory
      run: |
        if [ "${{ matrix.version }}" = "v1" ]; then
          echo "WORK_DIR=." >> $GITHUB_ENV
        else
          echo "WORK_DIR=v2" >> $GITHUB_ENV
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.21-${{ matrix.version }}-${{ hashFiles(format('{0}/**/go.sum', env.WORK_DIR)) }}
        restore-keys: |
          ${{ runner.os }}-go-1.21-${{ matrix.version }}-

    - name: Download dependencies
      run: |
        cd ${{ env.WORK_DIR }}
        go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        working-directory: ${{ env.WORK_DIR }}
        args: --timeout=5m

  format:
    name: Format Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['v1', 'v2']
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Set working directory
      run: |
        if [ "${{ matrix.version }}" = "v1" ]; then
          echo "WORK_DIR=." >> $GITHUB_ENV
        else
          echo "WORK_DIR=v2" >> $GITHUB_ENV
        fi

    - name: Check formatting
      run: |
        cd ${{ env.WORK_DIR }}
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -l .
          exit 1
        fi

    - name: Install goimports
      run: go install golang.org/x/tools/cmd/goimports@latest

    - name: Check imports
      run: |
        cd ${{ env.WORK_DIR }}
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "Imports are not organized. Please run 'goimports -w .'"
          goimports -l .
          exit 1
        fi

  build-examples:
    name: Build Examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['v1', 'v2']
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev

    - name: Set working directory
      run: |
        if [ "${{ matrix.version }}" = "v1" ]; then
          echo "WORK_DIR=." >> $GITHUB_ENV
        else
          echo "WORK_DIR=v2" >> $GITHUB_ENV
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.21-${{ matrix.version }}-${{ hashFiles(format('{0}/**/go.sum', env.WORK_DIR)) }}
        restore-keys: |
          ${{ runner.os }}-go-1.21-${{ matrix.version }}-

    - name: Download dependencies
      run: |
        cd ${{ env.WORK_DIR }}
        go mod download

    - name: Build REQ/REP example
      run: |
        cd ${{ env.WORK_DIR }}/examples/reqrep
        go build -v .

    - name: Build PUB/SUB example
      run: |
        cd ${{ env.WORK_DIR }}/examples/pubsub
        go build -v .

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ['v1', 'v2']
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install ZeroMQ
      run: |
        sudo apt-get update
        sudo apt-get install -y libzmq3-dev

    - name: Set working directory
      run: |
        if [ "${{ matrix.version }}" = "v1" ]; then
          echo "WORK_DIR=." >> $GITHUB_ENV
        else
          echo "WORK_DIR=v2" >> $GITHUB_ENV
        fi

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.21-${{ matrix.version }}-${{ hashFiles(format('{0}/**/go.sum', env.WORK_DIR)) }}
        restore-keys: |
          ${{ runner.os }}-go-1.21-${{ matrix.version }}-

    - name: Download dependencies
      run: |
        cd ${{ env.WORK_DIR }}
        go mod download

    - name: Run benchmarks
      run: |
        cd ${{ env.WORK_DIR }}
        go test -bench=. -benchmem ./...
